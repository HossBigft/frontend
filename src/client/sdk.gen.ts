// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { LoginAccessTokenData, LoginAccessTokenError, LoginAccessTokenResponse, TestTokenError, TestTokenResponse, GetARecordData, GetARecordError, GetARecordResponse, GetPtrRecordData, GetPtrRecordError, GetPtrRecordResponse, GetZoneMasterFromDnsServersData, GetZoneMasterFromDnsServersError, GetZoneMasterFromDnsServersResponse, GetMxRecordData, GetMxRecordError, GetMxRecordResponse, GetNsRecordsData, GetNsRecordsError, GetNsRecordsResponse, ReadUsersData, ReadUsersError, ReadUsersResponse, CreateUserData, CreateUserError, CreateUserResponse, ReadUserMeError, ReadUserMeResponse, DeleteUserMeError, DeleteUserMeResponse, UpdateUserMeData, UpdateUserMeError, UpdateUserMeResponse, UpdatePasswordMeData, UpdatePasswordMeError, UpdatePasswordMeResponse, RegisterUserData, RegisterUserError, RegisterUserResponse, ReadUserByIdData, ReadUserByIdError, ReadUserByIdResponse, UpdateUserData, UpdateUserError, UpdateUserResponse, DeleteUserData, DeleteUserError, DeleteUserResponse, GetUserActionsData, GetUserActionsError, GetUserActionsResponse, FindPleskSubscriptionByDomainData, FindPleskSubscriptionByDomainError, FindPleskSubscriptionByDomainResponse, HealthCheckError, HealthCheckResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginAccessTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginAccessTokenResponse, LoginAccessTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/api/v1/login/access-token'
    });
};

/**
 * Test Token
 * Test access token
 */
export const testToken = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<TestTokenResponse, TestTokenError, ThrowOnError>({
        ...options,
        url: '/api/v1/login/login/test-token'
    });
};

/**
 * Get A Record
 */
export const getARecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetARecordData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetARecordResponse, GetARecordError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/hoster/resolve/a/'
    });
};

/**
 * Get Ptr Record
 */
export const getPtrRecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPtrRecordData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPtrRecordResponse, GetPtrRecordError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/ptr/'
    });
};

/**
 * Get Zone Master From Dns Servers
 */
export const getZoneMasterFromDnsServers = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetZoneMasterFromDnsServersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetZoneMasterFromDnsServersResponse, GetZoneMasterFromDnsServersError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/hoster/get/zonemaster/'
    });
};

/**
 * Get Mx Record
 */
export const getMxRecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMxRecordData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMxRecordResponse, GetMxRecordError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/hoster/resolve/mx/'
    });
};

/**
 * Get Ns Records
 */
export const getNsRecords = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetNsRecordsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNsRecordsResponse, GetNsRecordsError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/ns/'
    });
};

/**
 * Read Users
 * Retrieve users.
 */
export const readUsers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ReadUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersResponse, ReadUsersError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/'
    });
};

/**
 * Create User
 * Create new user.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/'
    });
};

/**
 * Read User Me
 * Get current user.
 */
export const readUserMe = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUserMeResponse, ReadUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Delete User Me
 * Delete own user.
 */
export const deleteUserMe = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserMeResponse, DeleteUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Update User Me
 * Update own user.
 */
export const updateUserMe = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateUserMeData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateUserMeResponse, UpdateUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Update Password Me
 * Update own password.
 */
export const updatePasswordMe = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePasswordMeData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdatePasswordMeResponse, UpdatePasswordMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me/password'
    });
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterUserResponse, RegisterUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/signup'
    });
};

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const readUserById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ReadUserByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUserByIdResponse, ReadUserByIdError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}'
    });
};

/**
 * Update User
 * Update a user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateUserData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}'
    });
};

/**
 * Delete User
 * Delete a user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}'
    });
};

/**
 * Get User Actions
 */
export const getUserActions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserActionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserActionsResponse, GetUserActionsError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}/history'
    });
};

/**
 * Find Plesk Subscription By Domain
 */
export const findPleskSubscriptionByDomain = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<FindPleskSubscriptionByDomainData, ThrowOnError>) => {
    return (options?.client ?? client).get<FindPleskSubscriptionByDomainResponse, FindPleskSubscriptionByDomainError, ThrowOnError>({
        ...options,
        url: '/api/v1/plesk/get/subscription/'
    });
};

/**
 * Health Check
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
        ...options,
        url: '/api/v1/utils/health-check/'
    });
};