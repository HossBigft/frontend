// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type DomainARecordResponse = {
    domain: DomainName;
    records: Array<IPv4Address>;
};

export type DomainMxRecordResponse = {
    domain: DomainName;
    records: Array<DomainName>;
};

export type DomainName = {
    domain: string;
};

export type DomainNsRecordResponse = {
    domain: DomainName;
    records: Array<DomainName>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type IPv4Address = string;

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type SetZonemasterInput = {
    target_plesk_server: string;
    domain: string;
};

export type SubscriptionDetailsModel = {
    host: DomainName;
    id: string;
    name: string;
    username: string;
    userlogin: string;
    domains: Array<SubscriptionName>;
};

export type SubscriptionListResponseModel = Array<SubscriptionDetailsModel>;

export type SubscriptionLoginLinkInput = {
    host: string;
    subscription_id: number;
};

export type SubscriptionName = {
    domain: string;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    full_name?: (string | null);
    role?: UserRoles;
    ssh_username?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    full_name?: (string | null);
    role?: UserRoles;
    ssh_username?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UserRoles = 'superuser' | 'admin' | 'user';

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    full_name?: (string | null);
    role?: UserRoles;
    ssh_username?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
    ssh_username?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginAccessTokenData = {
    body: Body_login_login_access_token;
};

export type LoginAccessTokenResponse = (Token);

export type LoginAccessTokenError = (HTTPValidationError);

export type TestTokenResponse = (UserPublic);

export type TestTokenError = unknown;

export type GetARecordData = {
    query: {
        domain: string;
    };
};

export type GetARecordResponse = (DomainARecordResponse);

export type GetARecordError = (HTTPValidationError);

export type GetPtrRecordData = {
    query: {
        ip: string;
    };
};

export type GetPtrRecordResponse = (unknown);

export type GetPtrRecordError = (HTTPValidationError);

export type GetZoneMasterFromDnsServersData = {
    query: {
        domain: string;
    };
};

export type GetZoneMasterFromDnsServersResponse = (unknown);

export type GetZoneMasterFromDnsServersError = (HTTPValidationError);

export type DeleteZoneFileForDomainData = {
    query: {
        domain: string;
    };
};

export type DeleteZoneFileForDomainResponse = (unknown);

export type DeleteZoneFileForDomainError = (HTTPValidationError);

export type GetMxRecordData = {
    query: {
        domain: string;
    };
};

export type GetMxRecordResponse = (DomainMxRecordResponse);

export type GetMxRecordError = (HTTPValidationError);

export type GetNsRecordsData = {
    query: {
        domain: string;
    };
};

export type GetNsRecordsResponse = (DomainNsRecordResponse);

export type GetNsRecordsError = (HTTPValidationError);

export type ReadUsersData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ReadUsersResponse = (UsersPublic);

export type ReadUsersError = (HTTPValidationError);

export type CreateUserData = {
    body: UserCreate;
};

export type CreateUserResponse = (UserPublic);

export type CreateUserError = (HTTPValidationError);

export type ReadUserMeResponse = (UserPublic);

export type ReadUserMeError = unknown;

export type DeleteUserMeResponse = (Message);

export type DeleteUserMeError = unknown;

export type UpdateUserMeData = {
    body: UserUpdateMe;
};

export type UpdateUserMeResponse = (UserPublic);

export type UpdateUserMeError = (HTTPValidationError);

export type UpdatePasswordMeData = {
    body: UpdatePassword;
};

export type UpdatePasswordMeResponse = (Message);

export type UpdatePasswordMeError = (HTTPValidationError);

export type RegisterUserData = {
    body: UserRegister;
};

export type RegisterUserResponse = (UserPublic);

export type RegisterUserError = (HTTPValidationError);

export type ReadUserByIdData = {
    path: {
        user_id: string;
    };
};

export type ReadUserByIdResponse = (UserPublic);

export type ReadUserByIdError = (HTTPValidationError);

export type UpdateUserData = {
    body: UserUpdate;
    path: {
        user_id: string;
    };
};

export type UpdateUserResponse = (UserPublic);

export type UpdateUserError = (HTTPValidationError);

export type DeleteUserData = {
    path: {
        user_id: string;
    };
};

export type DeleteUserResponse = (Message);

export type DeleteUserError = (HTTPValidationError);

export type GetUserActionsData = {
    path: {
        user_id: string;
    };
};

export type GetUserActionsResponse = (unknown);

export type GetUserActionsError = (HTTPValidationError);

export type FindPleskSubscriptionByDomainData = {
    query: {
        domain: string;
    };
};

export type FindPleskSubscriptionByDomainResponse = (SubscriptionListResponseModel);

export type FindPleskSubscriptionByDomainError = (HTTPValidationError);

export type GetSubscriptionLoginLinkData = {
    body: SubscriptionLoginLinkInput;
};

export type GetSubscriptionLoginLinkResponse = (unknown);

export type GetSubscriptionLoginLinkError = (HTTPValidationError);

export type SetZonemasterData = {
    body: SetZonemasterInput;
};

export type SetZonemasterResponse = (Message);

export type SetZonemasterError = (HTTPValidationError);

export type HealthCheckResponse = (boolean);

export type HealthCheckError = unknown;

export type RecoverPasswordData = {
    path: {
        email: string;
    };
};

export type RecoverPasswordResponse = (Message);

export type RecoverPasswordError = (HTTPValidationError);

export type ResetPasswordData = {
    body: NewPassword;
};

export type ResetPasswordResponse = (Message);

export type ResetPasswordError = (HTTPValidationError);

export type RecoverPasswordHtmlContentData = {
    path: {
        email: string;
    };
};

export type RecoverPasswordHtmlContentResponse = (string);

export type RecoverPasswordHtmlContentError = (HTTPValidationError);